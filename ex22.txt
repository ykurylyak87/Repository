Excercise 00: The Setup
- mkdir: Make directory (folder)
- cd: Change directory
- ls: List contents of directory

Excercise 01: A Good First Program
- print: Display text in console

Excercise 02: Comments And Pound Characters
- #: Comment/disable line

Excercise 03: Numbers and Math
- + plus
- - minus
- / slash
- * asterisk
- % percent (but used as modulo/modulus)
- < less-than
- > greater-than
- <= less-than-equal
- >= greater-than-equal

Excercise 04: Variables and Names
- _: underscores in variable names
- floating point: numbers with decimals
- integer: numbers w/o decimals

Excercise 05: More Variables and Printing
- format strings
- %s: to put a value in a strings
- %: provide the value after the strings
- %d: for numbers ("digits")
- %r: for "raw data" (actually, "representation")

Excercise 06: Strings and Text
- ': single quote
- ": double quote

Excercise 07: More Printing
- +: for joining strings without spaces
- ,: for joining strings with spaces

Excercise 08: Printing, Printing
- True: Boolean value/keyword that doesn't need quotes
- False: Boolean value/keyword that doesn't need quotes

Excercise 09: Printing, Printing, Printing
- \: backslash, used to escape characters
- \n: new line command
- """: triple quotes to set off several lines of text

Excercise 10: What Was That?
- \\: to escape a backslash \ within a string
- \': to escape a single quote within a string
- \": to escape a double quote within a string
- \r: carriage return within string
- \t: tab within string
- ''': Alternative method of triple quotes

Excercise 11: Asking Questions
- raw_input(): to get typed input from user

Excercise 12: Prompting People
- raw_input("Prompt text:"): Alternative way to put prompt in for raw_input from user
- pydoc: Shell command for information on Python topics
- pydoc topics: raw_input (on Windows use python -m pydoc raw_input), open, file, os, sys

Excercise 13: Parameters, Unpacking, Variables
- arguments: variable values provided by users
- pass: Sending info from arguments to variables
- import: Bringing additional features into Python
- argv: the argument variables 
- packing/unpacking values: to get info in and out of argv
- module: the name for the collections of extra code that can be imported into Python (AKA libraries)

Excercise 14: Prompting and Passing
- prompt: A character or string that the user can specify to ask for info from the user

Excercise 15: Reading Files
- open: Make a file available to Python
- .: dot operator to join a function (or command or method) to an object
- .read: Read the contents of the file
- .close: Close the file so it is not longer available to Python

Excercise 16: Reading and Writing Files
- w: write mode
- r: read mode
- a: append mode
- w+: write and read mode
- r+: read and write mode
- .truncate: delete contents of file
- .write: Write information to file
- pydoc import: for info on importing
- ;: semi-colon can separate commands on a single line
- len(): command that returns the length of a string

Excercise 17: More Files
- os.path: a library that adapts the file/director address to the specific requirements of the operating system
- exists: a function to determine whether a specific files exists; yields a boolean True or False

Excercise 18: Names, Variables, Code, Functions
- def: to define custom functions
- (*args): to refer to list of arguments in a function (but better to just list the arguments next to the function name)
- : and indent: to set block for function

Excercise 19: Functions and Variables
- More info on using variables within functions but no new terms or symbols

Excercise 20: Functions and Files
- .seek(): Go to a specific position within a file (in bytes); .seek(0) goes to beginning
- .readline: read one line from a file
- +=: shortcut for incrementing a variable

Excercise 21: Functions Can Return Something
- return: a value that a function makes available for use in a variable
